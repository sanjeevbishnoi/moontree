<mxfile host="65bd71144e">
    <diagram id="5_AmVxR5gJyT82otjQKE" name="Page-1">
        <mxGraphModel dx="657" dy="352" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;h1&gt;Thoughts on Domain Driven Design...&lt;/h1&gt;&lt;p&gt;The domain model is, perhaps an unhelpful term. it makes you assume there's one model, but there is not.&lt;/p&gt;&lt;p&gt;There's a Data model, and a view model. The data must get conformed to the view.&lt;/p&gt;&lt;p&gt;&lt;span&gt;Recently we had a model like this:&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="40" y="40" width="680" height="140" as="geometry"/>
                </mxCell>
                <mxCell id="3" style="edgeStyle=orthogonalEdgeStyle;html=1;" parent="1" source="4" target="16" edge="1">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="177.6851806640625" y="595" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="4" value="Holding" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;shadow=0;glass=0;labelBorderColor=none;sketch=0;strokeColor=default;swimlaneLine=1;" parent="1" vertex="1">
                    <mxGeometry x="280" y="550" width="140" height="90" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="assetId" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="4" vertex="1">
                    <mxGeometry y="30" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="Amount" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="4" vertex="1">
                    <mxGeometry y="60" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="Asset" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;shadow=0;glass=0;labelBorderColor=none;sketch=0;strokeColor=default;swimlaneLine=1;" parent="1" vertex="1">
                    <mxGeometry x="480" y="630" width="140" height="120" as="geometry"/>
                </mxCell>
                <mxCell id="8" value="technicalName" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="7" vertex="1">
                    <mxGeometry y="30" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="amountIssued" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="7" vertex="1">
                    <mxGeometry y="60" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="decimalPlaces" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="7" vertex="1">
                    <mxGeometry y="90" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="13" style="edgeStyle=orthogonalEdgeStyle;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" parent="1" source="5" target="7" edge="1">
                    <mxGeometry relative="1" as="geometry">
                        <Array as="points">
                            <mxPoint x="550" y="595"/>
                        </Array>
                    </mxGeometry>
                </mxCell>
                <mxCell id="15" style="edgeStyle=orthogonalEdgeStyle;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;" parent="1" source="6" target="16" edge="1">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="180" y="625" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="16" value="will validate amount is within asset boundaries" style="rounded=0;whiteSpace=wrap;html=1;shadow=0;glass=0;labelBorderColor=none;sketch=0;strokeColor=default;" parent="1" vertex="1">
                    <mxGeometry x="40" y="580" width="180" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="18" value="Holding" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;shadow=0;glass=0;labelBorderColor=none;sketch=0;strokeColor=default;swimlaneLine=1;" parent="1" vertex="1">
                    <mxGeometry x="255" y="180" width="140" height="150" as="geometry"/>
                </mxCell>
                <mxCell id="22" value="technicalName" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="18" vertex="1">
                    <mxGeometry y="30" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="19" value="name" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="18" vertex="1">
                    <mxGeometry y="60" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="24" value="Decimal" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="18" vertex="1">
                    <mxGeometry y="90" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="20" value="Amount" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=1;shadow=0;glass=0;labelBorderColor=none;sketch=1;" parent="18" vertex="1">
                    <mxGeometry y="120" width="140" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="32" value="But it seemed insufficient because you couldn't validate that the given amount was within the issued amount for that asset. Fine. seems like we just include the issued amount here to and validate it.&lt;br&gt;&lt;br&gt;But the more you do that the more the Holding object is in charge of more and more things. ick! we want it to do one thing as much as possible.&lt;br&gt;&lt;br&gt;Plus we want to minimize the amount of bandwidth from the server. We don't want to provide all the icons and all the data for each asset on every holding, we want to give the asset data once and give holding information which references the assets.&lt;br&gt;&lt;br&gt;So we thought, how about this model:" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="40" y="360" width="680" height="160" as="geometry"/>
                </mxCell>
                <mxCell id="33" value="That's pretty nice because now, transaction screens can get data about assets too.&lt;br&gt;&lt;br&gt;I realized &quot;domain model&quot; is &quot;UI model&quot; on one side, and &quot;data model&quot; on the other side.&lt;br&gt;&lt;br&gt;We really want two models and together they make up the domain model.&lt;br&gt;&lt;br&gt;The datamodel feeds the UI model because, of course, at the end of the day we want all that info on screen.&lt;br&gt;&lt;br&gt;So we'll get data from our API, save it in a Data model structure - how it is in the database.&lt;br&gt;&lt;br&gt;Then we'll have entities in the domain which represent the UI model - how we want that data combined and transformed - in order to feed the UI.&lt;br&gt;&lt;br&gt;This way we can build it from both ends.&amp;nbsp;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="40" y="780" width="680" height="240" as="geometry"/>
                </mxCell>
                <mxCell id="41" value="UI" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1050" width="570" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="45" style="edgeStyle=none;html=1;" parent="1" source="42" target="44" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="46" style="edgeStyle=none;html=1;exitX=0.75;exitY=0;exitDx=0;exitDy=0;entryX=0.75;entryY=1;entryDx=0;entryDy=0;" parent="1" source="42" target="44" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="47" style="edgeStyle=none;html=1;exitX=0.25;exitY=0;exitDx=0;exitDy=0;entryX=0.25;entryY=1;entryDx=0;entryDy=0;" parent="1" source="42" target="44" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="42" value="Data Model" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1190" width="570" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="43" value="Database" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1250" width="570" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="48" style="edgeStyle=none;html=1;" parent="1" source="44" edge="1">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="385" y="1190" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="44" value="Domain Model" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1070" width="570" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="49" value="UI" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1370" width="570" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="53" value="Domain Model" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1520" width="570" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="54" value="Database" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1700" width="570" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="69" style="edgeStyle=none;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="56" target="60" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="56" value="UI Model" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1390" width="570" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="57" value="Or perhaps this is a re-hashing of how I've always seen things. Perhaps the DDD approach is to make a layer inside with two API entry layers on either side." style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="40" y="1300" width="680" height="40" as="geometry"/>
                </mxCell>
                <mxCell id="63" style="edgeStyle=none;html=1;" parent="1" source="58" target="59" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="64" style="edgeStyle=none;html=1;entryX=0.75;entryY=1;entryDx=0;entryDy=0;exitX=0.75;exitY=0;exitDx=0;exitDy=0;" parent="1" source="58" target="59" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="65" style="edgeStyle=none;html=1;exitX=0.25;exitY=0;exitDx=0;exitDy=0;entryX=0.25;entryY=1;entryDx=0;entryDy=0;" parent="1" source="58" target="59" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="58" value="Data Model" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1640" width="570" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="62" style="edgeStyle=none;html=1;" parent="1" source="59" target="58" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="59" value="Repository Interfaces" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1580" width="570" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="66" style="edgeStyle=none;html=1;" parent="1" source="60" target="56" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="67" style="edgeStyle=none;html=1;exitX=0.75;exitY=0;exitDx=0;exitDy=0;entryX=0.75;entryY=1;entryDx=0;entryDy=0;" parent="1" source="60" target="56" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="68" style="edgeStyle=none;html=1;exitX=0.25;exitY=0;exitDx=0;exitDy=0;entryX=0.25;entryY=1;entryDx=0;entryDy=0;" parent="1" source="60" target="56" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="60" value="UI Interfaces" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="100" y="1500" width="570" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="70" value="As far as data flow is concerned I think this might be the clean architecture, DDD way. Well, doesn't that just mean the domain model represents the translation between the two?&amp;nbsp;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="40" y="1760" width="680" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="87" value="&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;p&gt;Ok, as usual I was over thinking it. Efficiency - what makes the programmer's job hard - is of no real concern. The idea is that you do things in as simple a manner as possible. Your Domain object is duplicated data, so what - ask it from the server, save it to the database as it is.&lt;/p&gt;&lt;p&gt;The theory behind this process is to draw straight lines as often as possible then once we run into scaling problems, refactor. That's more ideal, the theory goes, because you only have to refactor at the end. You're not solving efficiency with faulty assumptions, then those assumptions are shown to be faulty and you can't acheive a desired outcome so you have start over.&lt;/p&gt;&lt;p&gt;That's what domain driven design is - it takes it to the extreme, litterally just code the domain. Now, I was thinking it was an architecture, its not, it's a philosophy of process. So the architecture is up to me and I think I'm starting to see layers upon layers.&lt;/p&gt;&lt;p&gt;So we start at the top, the domain objects looks exactly how the user wants to interact with it. Then you want efficiency? ok,&amp;nbsp; change the database to store it efficiently and make a new layer inbetween that combines the data to get the domain object. So on and so forth.&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="40" y="1880" width="680" height="320" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>